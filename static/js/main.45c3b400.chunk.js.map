{"version":3,"sources":["types.ts","components/newCategory/newCategory.tsx","components/categoryList/CategoryList.tsx","components/categoryDetails/categoryDetails.tsx","components/editCategory/editCategory.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionTypes","NewCategory","categories","useSelector","state","dispatch","useDispatch","useState","category","setCategory","style","display","flexDirection","justifyContent","alignItems","className","placeholder","type","onChange","e","target","value","to","onClick","newCategories","push","setCategorySelected","categorySelected","addCategory","CategoryList","map","index","CategoryDetails","findCategory","find","EditCategory","editiedCategory","setEditiedCategory","editiedCategoryIndex","indexOf","updateCategory","App","tempCategories","filter","removeCategory","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","locations","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","action","setLocations","store","createStore","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.45c3b400.chunk.js","sourcesContent":["export type Location = {\r\n  name: string;\r\n  address: string;\r\n  coordinates: string;\r\n  category: string;\r\n};\r\n\r\nexport type MyLocationState = {\r\n  locations: Array<Location>;\r\n  categories: Array<string>;\r\n  categorySelected: string;\r\n};\r\n\r\nexport enum ActionTypes {\r\n  setCategory = \"SET_CATEGORY\",\r\n  setLocations = \"SET_LOCATION\",\r\n  setCategorySelected = \"SET_CATEGORY_SELECTED\",\r\n}\r\n\r\nexport type LocationActions =\r\n  | {\r\n      type: ActionTypes.setCategory;\r\n      categories: Array<string>;\r\n    }\r\n  | {\r\n      type: ActionTypes.setLocations;\r\n      locations: Array<Location>;\r\n    }\r\n  | {\r\n      type: ActionTypes.setCategorySelected;\r\n      categorySelected: string;\r\n    };\r\n","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { Link } from \"react-router-dom\";\r\nimport { ActionTypes, MyLocationState } from '../../types';\r\n\r\nconst NewCategory = () => {\r\n    const categories = useSelector<MyLocationState>(state => state.categories) as Array<string>;\r\n    const dispatch = useDispatch();\r\n    const [category, setCategory] = useState('')\r\n\r\n    const addCategory = () => {\r\n        let newCategories = [...categories]\r\n        newCategories.push(category)\r\n        dispatch({ type: ActionTypes.setCategory, categories: newCategories })\r\n        dispatch({ type: ActionTypes.setCategorySelected, categorySelected: '' })\r\n    };\r\n\r\n\r\n    return (\r\n        <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n            <div className=\"m-3 form-group\">\r\n                <input placeholder='category name' className=\"form-control\" type=\"text\" onChange={(e) => { setCategory(e.target.value) }} />\r\n                <Link to=\"/\" className='m-2 btn btn-info' onClick={() => { addCategory() }}>Add</Link>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NewCategory;","import './categoryList.css';\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { ActionTypes, MyLocationState } from '../../types';\r\n\r\nconst CategoryList = () => {\r\n    const categories = useSelector<MyLocationState>(state => state.categories) as Array<string>;\r\n    const categorySelected = useSelector<MyLocationState>(state => state.categorySelected) as string;\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <ul className=\"list-group\">\r\n            {categories.map((category, index) => {\r\n                return <div onClick={() => dispatch({ type: ActionTypes.setCategorySelected, categorySelected: category })}\r\n                    key={index} className={category == categorySelected ? 'categorySelected m-3 card' : \"m-3 card\"}>\r\n                    <h5 className=\"card-title\">{category}</h5></div>\r\n            })}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default CategoryList;","\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\"\r\nimport { Link } from \"react-router-dom\";\r\nimport { MyLocationState } from '../../types';\r\n\r\n\r\nconst CategoryDetails = () => {\r\n    const categories = useSelector<MyLocationState>(state => state.categories) as Array<string>;\r\n    const categorySelected = useSelector<MyLocationState>(state => state.categorySelected) as string;\r\n    let findCategory = categories.find(category => category === categorySelected)\r\n\r\n    return (\r\n        <div className=\"list-group\">\r\n            <h3>{findCategory}</h3>\r\n            <Link className='btn btn-secondary' to=\"/\">Back </Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CategoryDetails;","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { Link } from \"react-router-dom\";\r\nimport { ActionTypes, MyLocationState } from '../../types';\r\n\r\n\r\nconst EditCategory = () => {\r\n    const categorySelected = useSelector<MyLocationState>(state => state.categorySelected) as string;\r\n    const categories = useSelector<MyLocationState>(state => state.categories) as Array<string>;\r\n    const dispatch = useDispatch();\r\n    const [editiedCategory, setEditiedCategory] = useState(categorySelected)\r\n\r\n\r\n    const updateCategory = () => {\r\n        let newCategories = [...categories]\r\n        let editiedCategoryIndex = newCategories.indexOf(categorySelected);\r\n        newCategories[editiedCategoryIndex] = editiedCategory;\r\n        dispatch({ type: ActionTypes.setCategory, categories: newCategories })\r\n        dispatch({ type: ActionTypes.setCategorySelected, categorySelected: editiedCategory })\r\n    };\r\n\r\n    return (\r\n        <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n            <div className=\"m-3 form-group\">\r\n                <input className=\"form-control\" value={editiedCategory} type=\"text\" onChange={(e) => { setEditiedCategory(e.target.value) }} />\r\n                <Link to=\"/\" className='m-2 btn btn-info' onClick={() => updateCategory()}>Update</Link>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditCategory;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom'\nimport NewCategory from './components/newCategory/newCategory';\nimport CategoryList from './components/categoryList/CategoryList';\nimport CategoryDetails from './components/categoryDetails/categoryDetails';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ActionTypes, MyLocationState } from './types';\nimport EditCategory from './components/editCategory/editCategory';\n\nconst App = () => {\n  const categories = useSelector<MyLocationState>(state => state.categories) as Array<string>;\n  const categorySelected = useSelector<MyLocationState>(state => state.categorySelected) as string;\n  const dispatch = useDispatch();\n\n  const removeCategory = (categorySelected: string) => {\n    let tempCategories = categories.filter(category => category !== categorySelected)\n    dispatch({ type: ActionTypes.setCategory, categories: tempCategories })\n    dispatch({ type: ActionTypes.setCategorySelected, categorySelected: '' })\n  };\n\n  return (\n    <div className=\"m-3 App\">\n\n      <h2>My Locations</h2>\n\n      <Router>\n        <h3>{categorySelected ? categorySelected : 'Categories'}</h3>\n        <nav className=\" d-flex align-items-center justify-content-center navbar navbar-light bg-light\">\n          <ul className=\"navbar-nav flex-row \">\n            <Link className=\"nav-link mr-3\" to=\"/newCategory\">Create category</Link>\n            <Link style={categorySelected ? { display: 'flex' } : { display: 'none' }} className=\"nav-link mr-3\" onClick={() => { removeCategory(categorySelected) }} to='/'>Delete category</Link>\n            <Link style={categorySelected ? { display: 'flex' } : { display: 'none' }} className=\"nav-link mr-3\" to=\"/categoryDetails\">View category</Link>\n            <Link style={categorySelected ? { display: 'flex' } : { display: 'none' }} className=\"nav-link mr-3\" to=\"/editCategory\">Edit category</Link>\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route exact path='/' component={() => { return <CategoryList /> }} />\n          <Route exact path='/newCategory' component={() => { return <NewCategory /> }} />\n          <Route exact path='/categoryDetails' component={() => { return <CategoryDetails /> }} />\n          <Route exact path='/editCategory' component={() => { return <EditCategory /> }} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\"\nimport { createStore } from \"redux\"\nimport { ActionTypes, LocationActions, MyLocationState } from './types';\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { PersistPartial } from 'redux-persist/lib/persistReducer';\n\nconst initialState = {\n  categories: [],\n  locations: [],\n  categorySelected: ''\n};\n\nconst reducer = (state: MyLocationState = initialState, action: LocationActions): MyLocationState => {\n  switch (action.type) {\n    case ActionTypes.setCategory:\n      return { ...state, categories: action.categories }\n    case ActionTypes.setLocations:\n      return { ...state, locations: action.locations }\n    case ActionTypes.setCategorySelected:\n      return { ...state, categorySelected: action.categorySelected }\n    default:\n      return state;\n  };\n};\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['categories', 'locations']\n};\n\n\nconst persistedReducer = persistReducer(persistConfig, reducer)\nconst store = createStore<MyLocationState & PersistPartial, any, any, any>(persistedReducer);\nconst persistor = persistStore(store)\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}